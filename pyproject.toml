[tool.poetry]
name = "updateservice"
version = "0.1.0"
description = "Simple Python REST service to manage packages updates"
authors = [""]


[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.75.2"
uvicorn = {extras = ["standard"], version = "^0.17.6"}
pydantic = {extras = ["dotenv"], version = "^1.10.2"}
poethepoet = "^0.13.1"
SQLAlchemy = {extras = ["asyncio"], version = "^1.4.41"}
greenlet = "^1.1.3.post0"
httpx = "^0.23.0"
asyncpg = "^0.26.0"
alembic = "^1.8.1"
PyJWT = {extras = ["crypto"], version = "^2.6.0"}
python-decouple = "^3.6"



[tool.poetry.dev-dependencies]
ipython = "^8.2.0"
ipdb = "^0.13.9"
mypy = "^0.942"
pylint = "^2.13.7"
pytest = "^7.1.2"
isort = "^5.10.1"
black = "^22.3.0"
pytest-cov = "^3.0.0"
pytest-asyncio = "^0.19.0"


[tool.coverage.run]
  omit = ["updateservice/api_tests/*", "updateservice/tests/*"]


[tool.pytest.ini_options]
markers = [
  "wrong_env: mark test to run only on wrong environment",
]
filterwarnings = [
    "ignore::DeprecationWarning"]

[tool.poe.tasks]

  [tool.poe.tasks.compose]
  cmd = "docker-compose build --no-cache"

  [tool.poe.tasks.compose_up]
  cmd = "docker-compose up -d"

  [tool.poe.tasks.compose_down]
  cmd = "docker-compose down"

  [tool.poe.tasks.build_image]
  cmd = "docker build -t updateservice:${tag} . "

  [[tool.poe.tasks.build_image.args]]
  name = "tag"
  options = ["--tag"]
  help = "Building the docker image"
  default = "latest"


  [tool.poe.tasks.makemigration]
  cmd = 'alembic -c "alembic.ini" revision --autogenerate -m "${m}"'

  [[tool.poe.tasks.makemigration.args]]
  name = "m"
  options = ["-m"]
  help = "Create a new migration"
  default = "Table1"

  [tool.poe.tasks.migrate]
  cmd = "alembic -c 'alembic.ini' upgrade head"



  [tool.poe.tasks.makemigration_test]
  cmd = 'alembic -c "alembic-test.ini" revision --autogenerate -m "${m}"'

  [[tool.poe.tasks.makemigration_test.args]]
  name = "m"
  options = ["-m"]
  help = "Create a new migration"
  default = "Table1_test"

  [tool.poe.tasks.migrate_test]
  cmd = "alembic -c 'alembic-test.ini' upgrade head"



  [tool.poe.tasks.clean]
  help = "Cleaning the artifacts"
  cmd = "rm -rf .coverage .pytest_cache ./**/__pycache__ htmlcov coverage.xml"

  [tool.poe.tasks.pytest]
  help = "Run unittests"
  cmd = """
    pytest updateservice/tests --cov-report=${cov_report_type} --cov=updateservice
  """
  [[tool.poe.tasks.pytest.args]]
  name = "cov_report_type"
  options = ["--cov-report-type"]
  help = "Report type. Must be either xml or html"
  default = "term"

  [tool.poe.tasks.testunit]
  cmd = "pytest updateservice/tests"
  env = { UPDATE_SRV_DB_CONNECTION_STRING_TEST = "postgresql+asyncpg://postgres:postgres@docker:5555" }

  [tool.poe.tasks.test_api_gitlab]
  help = "Cleaning and testing"
  sequence = ["clean", 'without_mark_testers_gitlab', "mark_testers_gitlab"]


  [tool.poe.tasks.without_mark_testers_gitlab]
  cmd = 'pytest updateservice/api_tests -m "not wrong_env"'
  env = { UPDATE_SRV_DB_CONNECTION_STRING = "postgresql+asyncpg://postgres:postgres@test_db:5555" }

  [tool.poe.tasks.mark_testers_gitlab]
  cmd = "pytest updateservice/api_tests -m 'wrong_env'"
  env = { UPDATE_SRV_DB_CONNECTION_STRING = "postgresql+asyncpg://postgres:postgres@0.0.0.0:555" }



  [tool.poe.tasks.test_api]
  help = "Cleaning and testing"
  sequence = ["clean", 'without_mark_testers', "mark_testers"]


  [tool.poe.tasks.without_mark_testers]
  cmd = 'pytest updateservice/api_tests -m "not wrong_env"'
  env = { UPDATE_SRV_DB_CONNECTION_STRING = "postgresql+asyncpg://postgres:postgres@0.0.0.0:5555" }

  [tool.poe.tasks.mark_testers]
  cmd = "pytest updateservice/api_tests -m 'wrong_env'"
  env = { UPDATE_SRV_DB_CONNECTION_STRING = "postgresql+asyncpg://postgres:postgres@0.0.0.0:555" }

  [tool.poe.tasks.test]
  help = "Cleaning and testing"
  sequence = ["clean", "pytest --cov-report-type=${cov_report_type}"]

  [[tool.poe.tasks.test.args]]
  name = "cov_report_type"
  options = ["--cov-report-type"]
  help = "Report type. Must be either xml or html"
  default = "term"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
